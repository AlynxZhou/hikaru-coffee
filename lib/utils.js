// Generated by CoffeeScript 2.3.1
(function() {
  var Promise, URL, escapeHTML, getAbsPathFn, getUrlFn, isCurrentPathFn, paginate, paginateCategories, path, removeControlChars, sortCategories;

  path = require("path");

  ({URL} = require("url"));

  Promise = require("bluebird");

  escapeHTML = function(str) {
    return str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
  };

  removeControlChars = function(str) {
    return str.replace(/[\x00-\x1F\x7F]/g, "");
  };

  paginate = function(p, posts, perPage, ctx) {
    var i, j, k, len, perPagePosts, post, ref, results;
    if (!perPage) {
      perPage = 10;
    }
    results = [];
    perPagePosts = [];
    for (j = 0, len = posts.length; j < len; j++) {
      post = posts[j];
      if (perPagePosts.length === perPage) {
        results.push(Object.assign({}, p, ctx, {
          "posts": perPagePosts
        }));
        perPagePosts = [];
      }
      perPagePosts.push(post);
    }
    results.push(Object.assign({}, p, ctx, {
      "posts": perPagePosts
    }));
    results[0]["pageArray"] = results;
    results[0]["pageIndex"] = 0;
    results[0]["docPath"] = p["docPath"];
    for (i = k = 1, ref = results.length; (1 <= ref ? k < ref : k > ref); i = 1 <= ref ? ++k : --k) {
      results[i]["pageArray"] = results;
      results[i]["pageIndex"] = i;
      results[i]["docPath"] = path.join(path.dirname(p["docPath"]), `${path.basename(p["docPath"], path.extname(p["docPath"]))}-${i + 1}.html`);
    }
    return results;
  };

  sortCategories = function(category) {
    var j, len, ref, results1, sub;
    category["posts"].sort(function(a, b) {
      return -(a["date"] - b["date"]);
    });
    category["subs"].sort(function(a, b) {
      return a["name"].localeCompare(b["name"]);
    });
    ref = category["subs"];
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      sub = ref[j];
      results1.push(sortCategories(sub));
    }
    return results1;
  };

  paginateCategories = function(category, parentPath, perPage, ctx) {
    var j, len, ref, results, sp, sub;
    results = [];
    sp = {
      "layout": "category",
      "docPath": path.join(parentPath, `${category["name"]}`, "index.html"),
      "title": "category",
      "name": category["name"].toString()
    };
    category["docPath"] = sp["docPath"];
    results = results.concat(paginate(sp, category["posts"], perPage, ctx));
    ref = category["subs"];
    for (j = 0, len = ref.length; j < len; j++) {
      sub = ref[j];
      results = results.concat(paginateCategories(sub, path.join(parentPath, `${category["name"]}`), perPage, ctx));
    }
    return results;
  };

  getAbsPathFn = function(rootDir = path.posix.sep) {
    rootDir = rootDir.replace(path.win32.sep, path.posix.sep);
    return function(docPath = "") {
      if (!path.posix.isAbsolute(rootDir)) {
        rootDir = path.posix.join(path.posix.sep, rootDir);
      }
      if (docPath.endsWith("index.html")) {
        docPath = docPath.substring(0, docPath.length - "index.html".length);
      }
      return encodeURI(path.posix.join(rootDir, docPath.replace(path.win32.sep, path.posix.sep)));
    };
  };

  getUrlFn = function(baseUrl, rootDir = path.posix.sep) {
    var getAbsPath;
    getAbsPath = getAbsPathFn(rootDir);
    return function(docPath = "") {
      return new URL(getAbsPath(docPath), baseUrl);
    };
  };

  isCurrentPathFn = function(rootDir = path.posix.sep, currentPath) {
    var currentToken, getAbsPath;
    // Must join a "/" before resolve or it will join current work dir.
    getAbsPath = getAbsPathFn(rootDir);
    currentPath = getAbsPath(currentPath);
    currentToken = path.posix.resolve(path.posix.join(path.posix.sep, currentPath.replace(path.win32.sep, path.posix.sep))).split(path.posix.sep);
    return function(testPath = "", strict = false) {
      var i, j, ref, testToken;
      testPath = getAbsPath(testPath);
      if (currentPath === testPath) {
        return true;
      }
      testToken = path.posix.resolve(path.posix.join(path.posix.sep, testPath.replace(path.win32.sep, path.posix.sep))).split(path.posix.sep);
      if (strict && testToken.length !== currentToken.length) {
        return false;
      }
      for (i = j = 0, ref = currentToken.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        if (testToken[i] !== currentToken[i]) {
          return false;
        }
      }
      return true;
    };
  };

  module.exports = {
    "escapeHTML": escapeHTML,
    "removeControlChars": removeControlChars,
    "paginate": paginate,
    "sortCategories": sortCategories,
    "paginateCategories": paginateCategories,
    "getAbsPathFn": getAbsPathFn,
    "getUrlFn": getUrlFn,
    "isCurrentPathFn": isCurrentPathFn
  };

}).call(this);
