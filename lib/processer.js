// Generated by CoffeeScript 2.3.1
(function() {
  var Processer, colors;

  colors = require("colors/safe");

  module.exports = Processer = class Processer {
    constructor(logger) {
      // fn: param p, posts, ctx, return Promise
      this.register = this.register.bind(this);
      this.process = this.process.bind(this);
      this.logger = logger;
      this._ = {};
    }

    register(layout, fn) {
      var i, l, len;
      if (!(fn instanceof Function)) {
        throw new TypeError("fn must be a Function!");
        return;
      }
      if (layout instanceof Array) {
        for (i = 0, len = layout.length; i < len; i++) {
          l = layout[i];
          this._[l] = {
            "layout": l,
            "fn": fn
          };
        }
        return;
      }
      return this._[layout] = {
        "layout": layout,
        "fn": fn
      };
    }

    async process(p, posts, templates, ctx) {
      var ps;
      this.logger.debug(`Hikaru is processing \`${colors.cyan(p["docPath"])}\`...`);
      if (p["layout"] in this._) {
        ps = (await this._[p["layout"]]["fn"](p, posts, ctx));
        if (ps instanceof Array) {
          return (await Promise.all(ps.map(async function(pp) {
            pp["content"] = (await templates[pp["layout"]]["content"](pp));
            return pp;
          })));
        }
        ps["content"] = (await templates[ps["layout"]]["content"](ps));
        return [ps];
      }
      p = Objects.assign({}, p, ctx);
      p["content"] = (await templates[p["layout"]]["content"](p));
      return [p];
    }

  };

}).call(this);
