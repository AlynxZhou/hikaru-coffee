// Generated by CoffeeScript 2.3.1
(function() {
  var Promise, Router, colors, fm, fse, getAbsPathFn, getUrlFn, glob, isCurrentPathFn, moment, path, yaml;

  path = require("path");

  fm = require("front-matter");

  fse = require("fs-extra");

  yaml = require("js-yaml");

  glob = require("glob");

  colors = require("colors/safe");

  moment = require("moment");

  Promise = require("bluebird");

  ({getAbsPathFn, getUrlFn, isCurrentPathFn} = require("./utils"));

  module.exports = Router = class Router {
    constructor(logger, renderer, processer, generator, translator, site) {
      this.readFile = this.readFile.bind(this);
      this.writeFile = this.writeFile.bind(this);
      this.loadThemeAssets = this.loadThemeAssets.bind(this);
      this.loadTemplates = this.loadTemplates.bind(this);
      this.loadSrcs = this.loadSrcs.bind(this);
      this.renderAssets = this.renderAssets.bind(this);
      this.renderTemplates = this.renderTemplates.bind(this);
      this.renderPosts = this.renderPosts.bind(this);
      this.renderPages = this.renderPages.bind(this);
      this.processP = this.processP.bind(this);
      this.processPosts = this.processPosts.bind(this);
      this.processPages = this.processPages.bind(this);
      this.saveAssets = this.saveAssets.bind(this);
      this.savePosts = this.savePosts.bind(this);
      this.savePages = this.savePages.bind(this);
      this.saveFile = this.saveFile.bind(this);
      this.route = this.route.bind(this);
      this.logger = logger;
      this.renderer = renderer;
      this.processer = processer;
      this.generator = generator;
      this.translator = translator;
      this.site = site;
      this.getUrl = getUrlFn(this.site["siteConfig"]["baseUrl"], this.site["siteConfig"]["rootDir"]);
      this.getAbsPath = getAbsPathFn(this.site["siteConfig"]["rootDir"]);
    }

    matchFiles(pattern, options) {
      return new Promise(function(resolve, reject) {
        return glob(pattern, options, function(err, res) {
          if (err) {
            return reject(err);
          }
          return resolve(res);
        });
      });
    }

    readFile(srcDir, srcPath) {
      this.logger.debug(`Hikaru is reading \`${colors.cyan(path.join(srcDir, srcPath))}\`...`);
      return fse.readFile(path.join(srcDir, srcPath), "utf8").then(function(raw) {
        return {
          "srcPath": srcPath,
          "srcDir": srcDir,
          "text": raw,
          "raw": raw
        };
      });
    }

    writeFile(srcDir, file) {
      this.logger.debug(`Hikaru is writing \`${colors.cyan(path.join(this.site["docDir"], file["docPath"]))}\`...`);
      if (file["content"] != null) {
        return fse.outputFile(path.join(this.site["docDir"], file["docPath"]), file["content"]);
      }
      return fse.copy(path.join(srcDir, file["srcPath"]), path.join(this.site["docDir"], file["docPath"]));
    }

    loadThemeAssets() {
      return this.matchFiles(path.join("**", "*"), {
        "nodir": true,
        "dot": true,
        "cwd": this.site["themeSrcDir"]
      }).then((themeSrcs) => {
        return Promise.all(themeSrcs.filter(function(srcPath) {
          // Asset is in sub dir.
          return path.dirname(srcPath) !== ".";
        }).map((srcPath) => {
          return this.readFile(this.site["themeSrcDir"], srcPath).then((file) => {
            return this.site["assets"].push(file);
          });
        }));
      });
    }

    loadTemplates() {
      return this.matchFiles("*", {
        "nodir": true,
        "dot": true,
        "cwd": this.site["themeSrcDir"]
      }).then((templates) => {
        return Promise.all(templates.map((srcPath) => {
          return this.readFile(this.site["themeSrcDir"], srcPath).then((file) => {
            file["key"] = path.basename(srcPath, path.extname(srcPath));
            return this.site["templates"][file["key"]] = file;
          });
        }));
      });
    }

    loadSrcs() {
      return this.matchFiles(path.join("**", "*"), {
        "nodir": true,
        "dot": true,
        "cwd": this.site["srcDir"]
      }).then((srcs) => {
        return Promise.all(srcs.map((srcPath) => {
          return this.readFile(this.site["srcDir"], srcPath).then((file) => {
            var parsed;
            if (typeof file["raw"] === "string") {
              parsed = fm(file["raw"]);
              file["text"] = parsed["body"];
              file = Object.assign(file, parsed["attributes"]);
              if (file["date"] != null) {
                // Fix js-yaml's bug that ignore timezone while parsing.
                // https://github.com/nodeca/js-yaml/issues/91
                file["date"] = new Date(file["date"].getTime() + file["date"].getTimezoneOffset() * 60000);
              } else {
                file["date"] = new Date();
              }
              if (file["text"] !== file["raw"]) {
                if (file["title"] != null) {
                  file["title"] = file["title"].toString();
                }
                if (file["layout"] === "post") {
                  return this.site["posts"].push(file);
                } else {
                  // Need load templates first.
                  if (!(file["layout"] in this.site["templates"])) {
                    file["layout"] = "page";
                  }
                  return this.site["pages"].push(file);
                }
              } else {
                return this.site["assets"].push(file);
              }
            }
          });
        }));
      });
    }

    renderAssets() {
      return Promise.all(this.site["assets"].map((asset) => {
        return this.renderer.render(asset);
      }));
    }

    renderTemplates() {
      return Promise.all(Object.values(this.site["templates"]).map((template) => {
        return this.renderer.render(template);
      }));
    }

    renderPosts() {
      return Promise.all(this.site["posts"].map((post) => {
        return this.renderer.render(post);
      }));
    }

    renderPages() {
      return Promise.all(this.site["pages"].map((page) => {
        return this.renderer.render(page);
      }));
    }

    async processP(p) {
      var err, lang, language, ps;
      lang = p["language"] || this.site["siteConfig"]["language"];
      if (!(lang in this.translator.list())) {
        try {
          language = yaml.safeLoad(fse.readFileSync(path.join(this.site["themeDir"], "languages", `${lang}.yml`)));
          this.translator.register(lang, language);
        } catch (error) {
          err = error;
          if (err["code"] === "ENOENT") {
            this.logger.warn(`Hikaru cannot find \`${lang}\` language file in your theme.`);
          }
        }
      }
      ps = (await this.processer.process(p, this.site["posts"], {
        "site": this.site,
        "siteConfig": this.site["siteConfig"],
        "themeConfig": this.site["themeConfig"],
        "moment": moment,
        "getUrl": this.getUrl,
        "getAbsPath": this.getAbsPath,
        "isCurrentPath": isCurrentPathFn(this.site["siteConfig"]["rootDir"], p["docPath"]),
        "__": this.translator.getTranslateFn(lang)
      }));
      if (!(ps instanceof Array)) {
        return [ps];
      }
      return ps;
    }

    async processPosts() {
      var i, j, k, len, p, processed, ref, ref1, results;
      this.site["posts"].sort(function(a, b) {
        return -(a["date"] - b["date"]);
      });
      processed = [];
      ref = this.site["posts"];
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        p = (await this.processP(p));
        processed = processed.concat(p);
      }
      this.site["posts"] = processed;
      results = [];
      for (i = k = 0, ref1 = this.site["posts"].length; (0 <= ref1 ? k < ref1 : k > ref1); i = 0 <= ref1 ? ++k : --k) {
        if (i > 0) {
          this.site["posts"][i]["next"] = this.site["posts"][i - 1];
        }
        if (i < this.site["posts"].length - 1) {
          results.push(this.site["posts"][i]["prev"] = this.site["posts"][i + 1]);
        } else {
          results.push(void 0);
        }
      }
      return results;
    }

    async processPages() {
      var j, len, p, processed, ref;
      processed = [];
      ref = this.site["pages"];
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        p = (await this.processP(p));
        processed = processed.concat(p);
      }
      return this.site["pages"] = processed;
    }

    saveAssets() {
      return this.site["assets"].map((asset) => {
        this.writeFile(asset["srcDir"], asset);
        return asset;
      });
    }

    savePosts() {
      return this.site["posts"].map((post) => {
        this.writeFile(post["srcDir"], post);
        return post;
      });
    }

    savePages() {
      return this.site["pages"].map((page) => {
        this.writeFile(page["srcDir"], page);
        return page;
      });
    }

    saveFile() {
      return this.site["file"].map((file) => {
        this.writeFile(null, file);
        return file;
      });
    }

    route() {
      return Promise.all([
        this.loadThemeAssets(),
        this.loadTemplates().then(() => {
          return this.loadSrcs();
        })
      ]).then(() => {
        this.renderAssets().then(() => {
          return this.saveAssets();
        }).catch((err) => {
          this.logger.warn("Hikaru catched some error during generating!");
          this.logger.error(err);
          return this.logger.warn("Hikaru advise you to check generating files!");
        });
        return Promise.all([this.renderTemplates(), this.renderPages(), this.renderPosts()]);
      }).then(async() => {
        this.site = (await this.generator.generate("beforeProcessing", this.site));
        // processPages() needs to wait for processed posts.
        await this.processPosts();
        await this.processPages();
        // Render post template needs tag and category links,
        // but those links are only generated after processing pages.
        // Maybe change tags and categories routes to a fix path in future.
        this.site["posts"] = (await Promise.all(this.site["posts"].map(async(p) => {
          p["content"] = (await this.site["templates"][p["layout"]]["content"](p));
          return p;
        })));
        this.site["pages"] = (await Promise.all(this.site["pages"].map(async(p) => {
          p["content"] = (await this.site["templates"][p["layout"]]["content"](p));
          return p;
        })));
        this.site = (await this.generator.generate("afterProcessing", this.site));
        this.savePosts();
        this.savePages();
        return this.saveFile();
      }).catch((err) => {
        this.logger.warn("Hikaru catched some error during generating!");
        this.logger.error(err);
        return this.logger.warn("Hikaru advise you to check generating files!");
      });
    }

  };

}).call(this);
