// Generated by CoffeeScript 2.3.1
(function() {
  var Router, fm, fse, glob, path;

  fse = require("fs-extra");

  fm = require("front-matter");

  path = require("path");

  glob = require("glob");

  module.exports = Router = class Router {
    constructor(logger, renderer, generator, translator, srcDir, docDir, themeSrcDir, siteConfig, themeConfig) {
      this.readData = this.readData.bind(this);
      this.writeData = this.writeData.bind(this);
      this.routeThemeAssets = this.routeThemeAssets.bind(this);
      this.routeTemplates = this.routeTemplates.bind(this);
      this.routeSrcs = this.routeSrcs.bind(this);
      this.route = this.route.bind(this);
      this.logger = logger;
      this.renderer = renderer;
      this.generator = generator;
      this.translator = translator;
      this.srcDir = srcDir;
      this.docDir = docDir;
      this.themeSrcDir = themeSrcDir;
      this.siteConfig = siteConfig;
      this.themeConfig = themeConfig;
      this.templates = {};
      this.pages = [];
      this.posts = [];
    }

    matchFiles(pattern, options) {
      return new Promise(function(resolve, reject) {
        return glob(pattern, options, function(err, res) {
          if (err) {
            return reject(err);
          }
          return resolve(res);
        });
      });
    }

    readData(srcDir, srcPath) {
      this.logger.debug(`Hikaru is loading \`${srcPath}\`...`);
      return fse.readFile(path.join(srcDir, srcPath), "utf8").then(function(raw) {
        return {
          "srcPath": srcPath,
          "text": raw,
          "raw": raw
        };
      });
    }

    writeData(srcDir, data) {
      this.logger.debug(`Hikaru is saving \`${data["docPath"]}\`...`);
      if (data["content"] != null) {
        return fse.outputFile(path.join(this.docDir, data["docPath"]), data["content"]);
      }
      return fse.copy(path.join(srcDir, data["srcPath"]), path.join(this.docDir, data["docPath"]));
    }

    routeThemeAssets() {
      return this.matchFiles(path.join("**", "*.*"), {
        "cwd": this.themeSrcDir
      }).then((themeSrcs) => {
        return themeSrcs.filter(function(srcPath) {
          // Asset is in sub dir.
          return path.dirname(srcPath) !== ".";
        }).map((srcPath) => {
          return this.readData(this.themeSrcDir, srcPath).then((data) => {
            return this.renderer.render(data, null);
          }).then((data) => {
            return this.writeData(this.themeSrcDir, data);
          });
        });
      });
    }

    routeTemplates() {
      return this.matchFiles("*.*", {
        "cwd": this.themeSrcDir
      }).then((templates) => {
        return Promise.all(templates.map((srcPath) => {
          return this.readData(this.themeSrcDir, srcPath).then((data) => {
            return this.templates[path.basename(srcPath, path.extname(srcPath))] = this.renderer.render(data, null);
          });
        }));
      });
    }

    routeSrcs() {
      return this.matchFiles(path.join("**", "*.*"), {
        "cwd": this.srcDir
      }).then((srcs) => {
        var j, len, renderedPromises, srcPath;
        renderedPromises = [];
        for (j = 0, len = srcs.length; j < len; j++) {
          srcPath = srcs[j];
          ((srcPath) => {
            return renderedPromises.push(this.readData(this.srcDir, srcPath).then((data) => {
              var parsed;
              if (typeof data["raw"] === "string") {
                parsed = fm(data["raw"]);
                data["text"] = parsed["body"];
                data = Object.assign(data, parsed["attributes"]);
                data["date"] = new Date(data["date"]);
                if (data["text"] !== data["raw"]) {
                  return this.renderer.render(data, null);
                }
              }
              this.renderer.render(data, null).then((data) => {
                return this.writeData(this.themeSrcDir, data);
              });
              return null;
            }));
          })(srcPath);
        }
        return Promise.all(renderedPromises.filter(function(p) {
          return p != null;
        }));
      });
    }

    route() {
      this.routeThemeAssets();
      return this.routeTemplates().then(() => {
        return this.routeSrcs();
      }).then(async(renderedPages) => {
        var all, generatedPages, generatedPosts, i, j, k, l, layout, len, len1, len2, len3, len4, len5, m, n, o, p, page, post, q, ref, ref1, ref2, ref3, ref4, results, search;
        for (j = 0, len = renderedPages.length; j < len; j++) {
          p = renderedPages[j];
          if (p["layout"] === "post") {
            this.posts.push(p);
          } else {
            this.pages.push(p);
          }
        }
        // Posts.
        this.posts.sort(function(a, b) {
          return -(a["date"] - b["date"]);
        });
        generatedPosts = [];
        ref = this.posts;
        for (k = 0, len1 = ref.length; k < len1; k++) {
          post = ref[k];
          p = this.generator.generate(post, null, {
            "siteConfig": this.siteConfig,
            "themeConfig": this.themeConfig,
            "Date": Date,
            "__": this.translator.__,
            "_p": this.translator._p,
            "hello": function() {
              return "Hello";
            }
          });
          if (!(p instanceof Array)) {
            generatedPosts.push(p);
          } else {
            generatedPosts = generatedPosts.concat(p);
          }
        }
        this.posts = generatedPosts;
        for (i = l = 0, ref1 = this.posts.length; (0 <= ref1 ? l < ref1 : l > ref1); i = 0 <= ref1 ? ++l : --l) {
          if (i > 0) {
            this.posts[i]["next"] = this.posts[i - 1];
          }
          if (i < this.posts.length - 1) {
            this.posts[i]["prev"] = this.posts[i + 1];
          }
        }
        // Pages.
        generatedPages = [];
        ref2 = this.pages;
        for (m = 0, len2 = ref2.length; m < len2; m++) {
          page = ref2[m];
          p = this.generator.generate(page, this.posts, {
            "siteConfig": this.siteConfig,
            "themeConfig": this.themeConfig,
            "Date": Date,
            "__": this.translator.__,
            "_p": this.translator._p,
            "hello": function() {
              return "Hello";
            }
          });
          if (!(p instanceof Array)) {
            generatedPages.push(p);
          } else {
            generatedPages = generatedPages.concat(p);
          }
        }
        this.pages = generatedPages;
        // Generate search index.
        search = [];
        all = this.pages.concat(this.posts);
        for (n = 0, len3 = all.length; n < len3; n++) {
          p = all[n];
          search.push({
            "title": p["title"],
            "url": path.posix.join(path.posix.sep, p["docPath"]),
            "content": p["text"]
          });
        }
        this.writeData(this.srcPath, {
          "srcPath": "search.json",
          "docPath": "search.json",
          "content": JSON.stringify(search)
        });
        ref3 = this.pages;
        for (o = 0, len4 = ref3.length; o < len4; o++) {
          page = ref3[o];
          layout = page["layout"];
          if (!(layout in this.templates)) {
            layout = "page";
          }
          page["content"] = (await this.templates[layout](page));
          this.writeData(this.srcDir, page);
        }
        ref4 = this.posts;
        // Merge post and template last.
        results = [];
        for (q = 0, len5 = ref4.length; q < len5; q++) {
          post = ref4[q];
          layout = post["layout"];
          if (!(layout in this.templates)) {
            layout = "page";
          }
          post["content"] = (await this.templates[layout](post));
          results.push(this.writeData(this.srcDir, post));
        }
        return results;
      });
    }

  };

}).call(this);
