// Generated by CoffeeScript 2.3.1
(function() {
  var Router, dateStrCompare, fm, fse, glob, moment, path;

  fse = require("fs-extra");

  fm = require("front-matter");

  path = require("path");

  glob = require("glob");

  moment = require("moment");

  ({dateStrCompare} = require("./utils"));

  module.exports = Router = class Router {
    constructor(logger, renderer, generator, translator, srcDir, docDir, themeSrcDir, siteConfig, themeConfig) {
      // fn: param site, change site.
      this.register = this.register.bind(this);
      this.readData = this.readData.bind(this);
      this.writeData = this.writeData.bind(this);
      this.routeThemeAssets = this.routeThemeAssets.bind(this);
      this.routeTemplates = this.routeTemplates.bind(this);
      this.routeSrcs = this.routeSrcs.bind(this);
      this.route = this.route.bind(this);
      this.logger = logger;
      this.renderer = renderer;
      this.generator = generator;
      this.translator = translator;
      this.srcDir = srcDir;
      this.docDir = docDir;
      this.themeSrcDir = themeSrcDir;
      this.store = [];
      this.site = {
        "siteConfig": siteConfig,
        "themeConfig": themeConfig,
        "templates": {},
        "pages": [],
        "posts": [],
        "data": []
      };
    }

    register(fn) {
      if (fn instanceof Function) {
        return this.store.push(fn);
      }
    }

    matchFiles(pattern, options) {
      return new Promise(function(resolve, reject) {
        return glob(pattern, options, function(err, res) {
          if (err) {
            return reject(err);
          }
          return resolve(res);
        });
      });
    }

    readData(srcDir, srcPath) {
      this.logger.debug(`Hikaru is loading \`${srcPath}\`...`);
      return fse.readFile(path.join(srcDir, srcPath), "utf8").then(function(raw) {
        return {
          "srcPath": srcPath,
          "text": raw,
          "raw": raw
        };
      });
    }

    writeData(srcDir, data) {
      this.logger.debug(`Hikaru is saving \`${data["docPath"]}\`...`);
      if (data["content"] != null) {
        return fse.outputFile(path.join(this.docDir, data["docPath"]), data["content"]);
      }
      return fse.copy(path.join(srcDir, data["srcPath"]), path.join(this.docDir, data["docPath"]));
    }

    routeThemeAssets() {
      return this.matchFiles(path.join("**", "*"), {
        "nodir": true,
        "cwd": this.themeSrcDir
      }).then((themeSrcs) => {
        return themeSrcs.filter(function(srcPath) {
          // Asset is in sub dir.
          return path.dirname(srcPath) !== ".";
        }).map((srcPath) => {
          return this.readData(this.themeSrcDir, srcPath).then((data) => {
            return this.renderer.render(data, null);
          }).then((data) => {
            return this.writeData(this.themeSrcDir, data);
          });
        });
      });
    }

    routeTemplates() {
      return this.matchFiles("*", {
        "nodir": true,
        "cwd": this.themeSrcDir
      }).then((templates) => {
        return Promise.all(templates.map((srcPath) => {
          return this.readData(this.themeSrcDir, srcPath).then((data) => {
            return this.site["templates"][path.basename(srcPath, path.extname(srcPath))] = this.renderer.render(data, null);
          });
        }));
      });
    }

    routeSrcs() {
      return this.matchFiles(path.join("**", "*"), {
        "nodir": true,
        "cwd": this.srcDir
      }).then((srcs) => {
        var j, len, renderedPromises, srcPath;
        renderedPromises = [];
        for (j = 0, len = srcs.length; j < len; j++) {
          srcPath = srcs[j];
          ((srcPath) => {
            return renderedPromises.push(this.readData(this.srcDir, srcPath).then((data) => {
              var parsed;
              if (typeof data["raw"] === "string") {
                parsed = fm(data["raw"]);
                data["text"] = parsed["body"];
                data = Object.assign({}, data, parsed["attributes"]);
                if (data["text"] !== data["raw"]) {
                  return this.renderer.render(data, null);
                }
              }
              this.renderer.render(data, null).then((data) => {
                return this.writeData(this.srcDir, data);
              });
              return null;
            }));
          })(srcPath);
        }
        return Promise.all(renderedPromises);
      });
    }

    route() {
      this.routeThemeAssets();
      return this.routeTemplates().then(() => {
        return this.routeSrcs();
      }).then(async(renderedPages) => {
        var data, fn, generatedPages, generatedPosts, i, j, k, l, len, len1, len2, len3, len4, len5, len6, m, n, o, p, page, post, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, results;
        for (j = 0, len = renderedPages.length; j < len; j++) {
          p = renderedPages[j];
          if (p == null) {
            continue;
          }
          if (p["layout"] === "post") {
            this.site["posts"].push(p);
          } else {
            this.site["pages"].push(p);
          }
        }
        // Posts.
        this.site["posts"].sort(dateStrCompare);
        ref = this.store;
        // Custum route.
        for (k = 0, len1 = ref.length; k < len1; k++) {
          fn = ref[k];
          this.site = fn(this.site);
        }
        generatedPosts = [];
        ref1 = this.site["posts"];
        for (l = 0, len2 = ref1.length; l < len2; l++) {
          post = ref1[l];
          p = this.generator.generate(post, null, {
            "site": this.site,
            "siteConfig": this.site["siteConfig"],
            "themeConfig": this.site["themeConfig"],
            "moment": moment,
            "pathPx": path.posix,
            "encodeURI": encodeURI,
            "encodeURIComponent": encodeURIComponent,
            "__": this.translator.__,
            "_p": this.translator._p
          });
          if (!(p instanceof Array)) {
            generatedPosts.push(p);
          } else {
            generatedPosts = generatedPosts.concat(p);
          }
        }
        this.site["posts"] = generatedPosts;
        for (i = m = 0, ref2 = this.site["posts"].length; (0 <= ref2 ? m < ref2 : m > ref2); i = 0 <= ref2 ? ++m : --m) {
          if (i > 0) {
            this.site["posts"][i]["next"] = this.site["posts"][i - 1];
          }
          if (i < this.site["posts"].length - 1) {
            this.site["posts"][i]["prev"] = this.site["posts"][i + 1];
          }
        }
        // Pages.
        generatedPages = [];
        ref3 = this.site["pages"];
        for (n = 0, len3 = ref3.length; n < len3; n++) {
          page = ref3[n];
          if (!(page["layout"] in this.site["templates"])) {
            page["layout"] = "page";
          }
          p = this.generator.generate(page, this.site["posts"], {
            "site": "site",
            site: this.site,
            "siteConfig": this.site["siteConfig"],
            "themeConfig": this.site["themeConfig"],
            "moment": moment,
            "pathPx": path.posix,
            "encodeURI": encodeURI,
            "encodeURIComponent": encodeURIComponent,
            "__": this.translator.__,
            "_p": this.translator._p
          });
          if (!(p instanceof Array)) {
            generatedPages.push(p);
          } else {
            generatedPages = generatedPages.concat(p);
          }
        }
        this.site["pages"] = generatedPages;
        ref4 = this.site["data"];
        for (o = 0, len4 = ref4.length; o < len4; o++) {
          data = ref4[o];
          this.writeData(this.srcDir, data);
        }
        ref5 = this.site["pages"];
        for (q = 0, len5 = ref5.length; q < len5; q++) {
          page = ref5[q];
          page["content"] = (await this.site["templates"][page["layout"]](page));
          this.writeData(this.srcDir, page);
        }
        ref6 = this.site["posts"];
        // Merge post and template last.
        results = [];
        for (r = 0, len6 = ref6.length; r < len6; r++) {
          post = ref6[r];
          post["content"] = (await this.site["templates"][post["layout"]](post));
          results.push(this.writeData(this.srcDir, post));
        }
        return results;
      });
    }

  };

}).call(this);
