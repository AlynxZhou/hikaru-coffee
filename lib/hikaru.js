// Generated by CoffeeScript 2.3.1
(function() {
  var Generator, Hikaru, Logger, Renderer, Router, Translator, cheerio, coffee, dateStrCompare, escapeHTML, fse, highlight, marked, nib, nunjucks, paginate, paginateCategories, path, sortCategories, stylus, yaml;

  fse = require("fs-extra");

  path = require("path");

  cheerio = require("cheerio");

  yaml = require("js-yaml");

  nunjucks = require("nunjucks");

  marked = require("marked");

  stylus = require("stylus");

  nib = require("nib");

  coffee = require("coffeescript");

  highlight = require("./highlight");

  Logger = require("./logger");

  Renderer = require("./renderer");

  Generator = require("./generator");

  Translator = require("./translator");

  Router = require("./router");

  ({escapeHTML, paginate, dateStrCompare, sortCategories, paginateCategories} = require("./utils"));

  module.exports = Hikaru = class Hikaru {
    constructor(debug = false) {
      this.init = this.init.bind(this);
      this.clean = this.clean.bind(this);
      this.generate = this.generate.bind(this);
      this.registerInternalRenderers = this.registerInternalRenderers.bind(this);
      this.registerInternalGenerators = this.registerInternalGenerators.bind(this);
      this.debug = debug;
      this.logger = new Logger(this.debug);
      this.logger.debug("Hikaru is starting...");
      process.on("exit", () => {
        return this.logger.debug("Hikaru is stopping...");
      });
    }

    init(workDir = ".", configPath, srcDir, docDir, themeSrcDir) {
      this.logger.debug(`Hikaru started initialization in \`${workDir}\`.`);
      return fse.mkdirp(workDir).then(() => {
        this.logger.debug(`Hikaru created \`${workDir}/\`.`);
        return fse.mkdirp(srcDir || path.join(workDir, "src"));
      }).then(() => {
        this.logger.debug(`Hikaru created \`${srcDir || path.join(workDir, "src")}/\`.`);
        return fse.copy(path.join(__dirname, "..", "dist", "config.yml"), configPath || path.join(workDir, "config.yml"));
      }).then(() => {
        this.logger.debug(`Hikaru copyed \`${configPath || path.join(workDir, "config.yml")}\`.`);
        return fse.mkdirp(docDir || path.join(workDir, "doc"));
      }).then(() => {
        this.logger.debug(`Hikaru created \`${docDir || path.join(workDir, "doc")}/\`.`);
        return fse.mkdirp(themeSrcDir || path.join(workDir, "themes"));
      }).then(() => {
        this.logger.debug(`Hikaru created \`${themeSrcDir || path.join(workDir, "themes")}/\`.`);
        return this.logger.debug(`Hikaru finished initialization in \`${workDir}\`.`);
      }).catch(this.logger.error);
    }

    clean(workDir = ".", configPath, docDir) {
      this.workDir = workDir;
      configPath = configPath || path.join(this.workDir, "config.yml");
      this.siteConfig = yaml.safeLoad(fse.readFileSync(configPath, "utf8"));
      this.docDir = docDir || path.join(this.workDir, this.siteConfig["docDir"]) || path.join(this.workDir, "doc");
      return fse.emptyDir(this.docDir).then(() => {
        return this.logger.debug(`Hikaru cleaned \`${this.docDir}/\`.`);
      }).catch(this.logger.error);
    }

    generate(workDir = ".", configPath, srcDir, docDir, themeDir) {
      var err, language;
      this.workDir = workDir;
      configPath = configPath || path.join(this.workDir, "config.yml");
      this.siteConfig = yaml.safeLoad(fse.readFileSync(configPath, "utf8"));
      this.srcDir = srcDir || path.join(this.workDir, this.siteConfig["srcDir"]) || path.join(this.workDir, "src");
      this.docDir = docDir || path.join(this.workDir, this.siteConfig["docDir"]) || path.join(this.workDir, "doc");
      this.themeDir = (themeDir != null ? themeDir : path.join(this.workDir, "themes", this.siteConfig["themeDir"]) || path.join(this.workDir, "themes", "aria"));
      this.themeSrcDir = (themeDir != null ? path.join(themeDir, "src") : path.join(this.workDir, "themes", this.siteConfig["themeDir"], "src") || path.join(this.workDir, "themes", "aria", "src"));
      try {
        this.themeConfig = yaml.safeLoad(fse.readFileSync(path.join(this.themeDir, "config.yml")));
      } catch (error) {
        err = error;
        if (err["code"] === "ENOENT") {
          this.logger.info("Hikaru continues with a empty theme config...");
          this.themeConfig = {};
        }
      }
      this.renderer = new Renderer(this.logger);
      this.generator = new Generator(this.logger);
      language = yaml.safeLoad(fse.readFileSync(path.join(this.themeDir, "languages", `${this.siteConfig["language"]}.yml`)));
      this.translator = new Translator(language);
      this.router = new Router(this.logger, this.renderer, this.generator, this.translator, this.srcDir, this.docDir, this.themeSrcDir, this.siteConfig, this.themeConfig);
      this.registerInternalRenderers();
      this.registerInternalGenerators();
      return this.router.route();
    }

    registerInternalRenderers() {
      var markedConfig, njkConfig, njkEnv, renderer, stylConfig, templateDir;
      templateDir = this.themeSrcDir;
      njkConfig = Object.assign({}, {
        "autoescape": false
      }, this.siteConfig["nunjucks"]);
      njkEnv = nunjucks.configure(templateDir, njkConfig);
      this.renderer.register([".njk", ".j2"], null, function(data, ctx) {
        var njkRender, template;
        // For template you must give a render function.
        template = nunjucks.compile(data["text"], njkEnv, data["srcPath"]);
        njkRender = function(ctx) {
          return new Promise(function(resolve, reject) {
            return template.render(ctx, function(err, res) {
              if (err) {
                return reject(err);
              }
              return resolve(res);
            });
          });
        };
        return njkRender;
      });
      markedConfig = Object.assign({}, {
        "gfm": true
      }, this.siteConfig["marked"]);
      renderer = new marked.Renderer();
      renderer.heading = function(text, level) {
        var escaped;
        escaped = escapeHTML(text);
        return `<h${level} id="h${level}-${escaped}">` + `<a class="headerlink" href="#${escaped}" title="#${escaped}">` + "</a>" + `${text}` + `</h${level}>`;
      };
      marked.setOptions({
        "langPrefix": "",
        "highlight": function(code, lang) {
          return highlight(code, {
            "lang": lang != null ? lang.toLowerCase() : void 0,
            "hljs": markedConfig["hljs"] || true,
            "gutter": markedConfig["gutter"] || true
          });
        }
      });
      this.renderer.register(".md", ".html", function(data, ctx) {
        return new Promise(function(resolve, reject) {
          var err;
          try {
            data["content"] = marked(data["text"], Object.assign({}, {
              "renderer": renderer
            }, markedConfig));
            return resolve(data);
          } catch (error) {
            err = error;
            return reject(err);
          }
        });
      });
      stylConfig = this.siteConfig.stylus || {};
      this.renderer.register(".styl", ".css", (data, ctx) => {
        return new Promise((resolve, reject) => {
          return stylus(data["text"]).use(nib()).use((style) => {
            return style.define("getSiteConfig", (data) => {
              var j, k, keys, len, res;
              keys = data["val"].toString().split(".");
              res = this.themeConfig;
              for (j = 0, len = keys.length; j < len; j++) {
                k = keys[j];
                if (!(k in res)) {
                  return null;
                }
                res = res[k];
              }
              return res;
            });
          }).use((style) => {
            return style.define("getThemeConfig", (data) => {
              var j, k, keys, len, res;
              keys = data["val"].toString().split(".");
              res = this.themeConfig;
              for (j = 0, len = keys.length; j < len; j++) {
                k = keys[j];
                if (!(k in res)) {
                  return null;
                }
                res = res[k];
              }
              return res;
            });
          }).set("filename", path.join(this.themeSrcDir, data["srcPath"])).set("sourcemap", stylConfig["sourcemap"]).set("compress", stylConfig["compress"]).set("include css", true).render(function(err, res) {
            if (err) {
              return reject(err);
            }
            data["content"] = res;
            return resolve(data);
          });
        });
      });
      // TODO: CoffeeScript render.
      return this.renderer.register(".coffee", ".js", function(data, ctx) {});
    }

    registerInternalGenerators() {
      this.generator.register("index", (page, posts, ctx) => {
        posts.sort(dateStrCompare);
        return paginate(page, posts, ctx, this.siteConfig["perPage"]);
      });
      this.generator.register("archives", (page, posts, ctx) => {
        posts.sort(dateStrCompare);
        return paginate(page, posts, ctx, this.siteConfig["perPage"]);
      });
      /*
      [
        {
          "name"ï¼šString,
          "posts": [Post],
          "subs": [
            {
              "name": String,
              "posts": [Post],
              "subs": []
            }
          ]
        }
      ]
      */
      this.generator.register("categories", (page, posts, ctx) => {
        var cateName, categories, category, found, j, l, len, len1, len2, len3, len4, m, n, newCate, o, post, postCategories, ref, results, sub, subCategories;
        categories = [];
        for (j = 0, len = posts.length; j < len; j++) {
          post = posts[j];
          if (post["categories"] == null) {
            continue;
          }
          postCategories = [];
          subCategories = categories;
          ref = post["categories"];
          for (l = 0, len1 = ref.length; l < len1; l++) {
            cateName = ref[l];
            found = false;
            for (m = 0, len2 = subCategories.length; m < len2; m++) {
              category = subCategories[m];
              if (category["name"] === cateName) {
                found = true;
                postCategories.push(category);
                category["posts"].push(post);
                subCategories = category["subs"];
                break;
              }
            }
            if (!found) {
              newCate = {
                "name": cateName,
                "posts": [post],
                "subs": []
              };
              postCategories.push(newCate);
              subCategories.push(newCate);
              subCategories = newCate["subs"];
            }
          }
          post["categories"] = postCategories;
        }
        categories.sort(function(a, b) {
          return a["name"].localeCompare(b["name"]);
        });
        for (n = 0, len3 = categories.length; n < len3; n++) {
          sub = categories[n];
          sortCategories(sub);
        }
        results = [];
        for (o = 0, len4 = categories.length; o < len4; o++) {
          sub = categories[o];
          results = results.concat(paginateCategories(sub, page, path.dirname(page["docPath"]), this.siteConfig["perPage"], ctx));
        }
        results.push(Object.assign({}, page, ctx, {
          "categories": categories
        }));
        return results;
      });
      /*
      [
        {
          "name": String,
          "posts": [Post]
        }
      ]
      */
      this.generator.register("tags", (page, posts, ctx) => {
        var found, j, l, len, len1, len2, len3, len4, m, n, newTag, o, p, post, postTags, ref, results, tag, tagName, tags;
        tags = [];
        for (j = 0, len = posts.length; j < len; j++) {
          post = posts[j];
          if (post["tags"] == null) {
            continue;
          }
          postTags = [];
          ref = post["tags"];
          for (l = 0, len1 = ref.length; l < len1; l++) {
            tagName = ref[l];
            found = false;
            for (m = 0, len2 = tags.length; m < len2; m++) {
              tag = tags[m];
              if (tag["name"] === tagName) {
                found = true;
                postTags.push(tag);
                tag["posts"].push(post);
                break;
              }
            }
            if (!found) {
              newTag = {
                "name": tagName,
                "posts": [post]
              };
              postTags.push(newTag);
              tags.push(newTag);
            }
          }
          post["tags"] = postTags;
        }
        tags.sort(function(a, b) {
          return a["name"].localeCompare(b["name"]);
        });
        for (n = 0, len3 = tags.length; n < len3; n++) {
          tag = tags[n];
          tag["posts"].sort(dateStrCompare);
        }
        results = [];
        for (o = 0, len4 = tags.length; o < len4; o++) {
          tag = tags[o];
          p = Object.assign({}, page);
          p["layout"] = "tag";
          p["docPath"] = path.join(path.dirname(page["docPath"]), `${tag["name"]}`, "index.html");
          tag["docPath"] = p["docPath"];
          p["title"] = "tag";
          p["name"] = tag["name"];
          results = results.concat(paginate(p, tag["posts"], ctx, this.siteConfig["perPage"]));
        }
        results.push(Object.assign({}, page, ctx, {
          "tags": tags
        }));
        return results;
      });
      return this.generator.register(["post", "page"], function(page, posts, ctx) {
        var $, a, h, hNames, headings, href, i, imgs, j, l, len, len1, len2, level, links, m, split, src, toc;
        $ = cheerio.load(page["content"]);
        // TOC generate.
        hNames = ["h1", "h2", "h3", "h4", "h5", "h6"];
        headings = $(hNames.join(", "));
        toc = [];
        for (j = 0, len = headings.length; j < len; j++) {
          h = headings[j];
          level = toc;
          while (level.length > 0 && hNames.indexOf(level[level.length - 1]["name"]) < hNames.indexOf(h["name"])) {
            level = level[level.length - 1]["subs"];
          }
          level.push({
            "id": $(h).attr("id"),
            "name": h["name"],
            "text": $(h).text().trim(),
            "subs": []
          });
        }
        // Replace relative path to absolute path.
        links = $("a");
        for (l = 0, len1 = links.length; l < len1; l++) {
          a = links[l];
          href = $(a).attr("href");
          if (href.startsWith("https://") || href.startsWith("http://") || href.startsWith("//") || href.startsWith("/") || href.startsWith("#")) {
            continue;
          }
          $(a).attr("href", path.posix.join(path.posix.sep, path.posix.dirname(page["docPath"]), href));
        }
        imgs = $("img");
        for (m = 0, len2 = imgs.length; m < len2; m++) {
          i = imgs[m];
          src = $(i).attr("src");
          if (src.startsWith("https://") || src.startsWith("http://") || src.startsWith("//") || src.startsWith("/") || src.startsWith("data:image")) {
            continue;
          }
          $(i).attr("src", path.posix.join(path.posix.sep, path.posix.dirname(page["docPath"]), src));
        }
        page["content"] = $("body").html();
        if (page["content"].indexOf("<!--more-->") !== -1) {
          split = page["content"].split("<!--more-->");
          page["excerpt"] = split[0];
          page["more"] = split[1];
        }
        return Object.assign({}, page, ctx, {
          "toc": toc
        });
      });
    }

  };

}).call(this);
