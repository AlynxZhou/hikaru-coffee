// Generated by CoffeeScript 2.3.1
(function() {
  var Generator, Hikaru, Logger, Renderer, Router, coffee, fse, highlight, marked, nib, nunjucks, paginate, path, stylus, yaml;

  fse = require("fs-extra");

  path = require("path");

  yaml = require("js-yaml");

  nunjucks = require("nunjucks");

  marked = require("marked");

  stylus = require("stylus");

  nib = require("nib");

  coffee = require("coffeescript");

  highlight = require("./highlight");

  Logger = require("./logger");

  Renderer = require("./renderer");

  Generator = require("./generator");

  Router = require("./router");

  module.exports = Hikaru = class Hikaru {
    constructor(debug = false) {
      this.init = this.init.bind(this);
      this.clean = this.clean.bind(this);
      this.generate = this.generate.bind(this);
      this.registerInternalRoutes = this.registerInternalRoutes.bind(this);
      this.registerInternalGenerators = this.registerInternalGenerators.bind(this);
      this.debug = debug;
      this.logger = new Logger(this.debug);
      this.logger.info("Hikaru is starting...");
      process.on("exit", () => {
        return this.logger.info("Hikaru is stopping...");
      });
    }

    init(workDir = ".", configPath, srcDir, docDir, themeDir) {
      this.logger.info(`Hikaru started initialization in \`${workDir}\`.`);
      return fse.mkdirp(workDir).then(() => {
        this.logger.info(`Hikaru created \`${workDir}/\`.`);
        return fse.mkdirp(srcDir || path.join(workDir, "src"));
      }).then(() => {
        this.logger.info(`Hikaru created \`${srcDir || path.join(workDir, "src")}/\`.`);
        return fse.copy(path.join(__dirname, "..", "dist", "config.yml"), configPath || path.join(workDir, "config.yml"));
      }).then(() => {
        this.logger.info(`Hikaru copyed \`${configPath || path.join(workDir, "config.yml")}\`.`);
        return fse.mkdirp(docDir || path.join(workDir, "doc"));
      }).then(() => {
        this.logger.info(`Hikaru created \`${docDir || path.join(workDir, "doc")}/\`.`);
        return fse.mkdirp(themeDir || path.join(workDir, "themes"));
      }).then(() => {
        this.logger.info(`Hikaru created \`${themeDir || path.join(workDir, "themes")}/\`.`);
        return this.logger.info(`Hikaru finished initialization in \`${workDir}\`.`);
      }).catch(this.logger.error);
    }

    clean(workDir = ".", configPath, docDir) {
      this.workDir = workDir;
      configPath = configPath || path.join(this.workDir, "config.yml");
      this.siteConfig = yaml.safeLoad(fse.readFileSync(configPath, "utf8"));
      this.docDir = docDir || path.join(this.workDir, this.siteConfig["docDir"]) || path.join(this.workDir, "doc");
      return fse.emptyDir(this.docDir).then(() => {
        return this.logger.info(`Hikaru cleaned \`${this.docDir}/\`.`);
      }).catch(this.logger.error);
    }

    generate(workDir = ".", configPath, srcDir, docDir, themeDir) {
      var err;
      this.workDir = workDir;
      configPath = configPath || path.join(this.workDir, "config.yml");
      this.siteConfig = yaml.safeLoad(fse.readFileSync(configPath, "utf8"));
      this.srcDir = srcDir || path.join(this.workDir, this.siteConfig["srcDir"]) || path.join(this.workDir, "src");
      this.docDir = docDir || path.join(this.workDir, this.siteConfig["docDir"]) || path.join(this.workDir, "doc");
      this.themeDir = (themeDir != null ? path.join(themeDir, "src") : path.join(this.workDir, this.siteConfig["themeDir"], "src") || path.join(this.workDir, "themes", "aria", "src"));
      try {
        this.themeConfig = yaml.safeLoad(fse.readFileSync(path.join(this.themeDir, "config.yml")));
      } catch (error) {
        err = error;
        if (err["code"] === "ENOENT") {
          this.logger.info("Hikaru continues with a empty theme config...");
          this.themeConfig = {};
        }
      }
      this.renderer = new Renderer(this.logger);
      this.generator = new Generator(this.logger);
      this.router = new Router(this.logger, this.renderer, this.generator, this.srcDir, this.docDir, this.themeDir);
      this.registerInternalRoutes();
      this.registerInternalGenerators();
      return this.router.route();
    }

    registerInternalRoutes() {
      var markedConfig, njkConfig, njkEnv, renderer, stylConfig, templateDir;
      templateDir = this.themeDir;
      njkConfig = Object.assign({
        "autoescape": false
      }, this.siteConfig["nunjucks"]);
      njkEnv = nunjucks.configure(templateDir, njkConfig);
      this.router.register(".njk", function(text, fullPath, ctx) {
        var njkRender, template;
        // For template you must give a render function.
        template = nunjucks.compile(text, njkEnv, fullPath);
        njkRender = function(ctx) {
          return new Promise(function(resolve, reject) {
            return template.render(ctx, function(err, res) {
              if (err) {
                return reject(err);
              }
              return resolve(res);
            });
          });
        };
        return njkRender;
      });
      markedConfig = Object.assign({
        "gfm": true
      }, this.siteConfig["marked"]);
      renderer = new marked.Renderer();
      renderer.heading = function(text, level) {
        var escaped;
        escaped = text.toLowerCase().replace(/[^\w]+/g, '-');
        return `<h${level}>\n  <a class="headerlink" href="#${escaped}" title="#${escaped}"></a>\n  ${text}\n</h${level}>`;
      };
      marked.setOptions({
        "langPrefix": "",
        "highlight": function(code, lang) {
          return highlight(code, {
            "lang": lang != null ? lang.toLowerCase() : void 0,
            "hljs": markedConfig["hljs"] || true,
            "gutter": markedConfig["gutter"] || true
          });
        }
      });
      this.router.register(".md", ".html", function(text, fullPath, ctx) {
        return marked(text, Object.assign({
          "renderer": renderer
        }, markedConfig));
      });
      stylConfig = this.siteConfig.stylus || {};
      this.router.register(".styl", ".css", function(text, fullPath, ctx) {
        return new Promise((resolve, reject) => {
          return stylus(text).use(nib()).use((style) => {
            return style.define("getSiteConfig", (data) => {
              return this.siteConfig[data["val"]];
            });
          }).use((style) => {
            return style.define("getThemeConfig", (data) => {
              return this.themeConfig[data["val"]];
            });
          }).set("filename", fullPath).set("sourcemap", stylConfig["sourcemap"]).set("compress", stylConfig["compress"]).set("include css", true).render(function(err, res) {
            if (err) {
              return reject(err);
            }
            return resolve(res);
          });
        });
      });
      // TODO: CoffeeScript render.
      return this.router.register(".coffee", ".js", function(text, fullPath, ctx) {});
    }

    registerInternalGenerators() {
      /*
      [
        {
          "name"ï¼šString,
          "posts": [Post],
          "subs": [
            {
              "name": String,
              "posts": [Post],
              "subs": []
            }
          ]
        }
      ]
      */
      var paginateCategories, sortCategories;
      this.generator.register("index", (page, posts) => {
        posts.sort(function(a, b) {
          return -(a["date"] - b["date"]);
        });
        return paginate(page, posts, this.siteConfig["perPage"]);
      });
      this.generator.register("archives", (page, posts) => {
        posts.sort(function(a, b) {
          return -(a["date"] - b["date"]);
        });
        return paginate(page, posts, this.siteConfig["perPage"]);
      });
      sortCategories = function(category) {
        var j, len, ref, results1, sub;
        category["posts"].sort(function(a, b) {
          return -(a["date"] - b["date"]);
        });
        category["subs"].sort(function(a, b) {
          return a["name"].localeCompare(b["name"]);
        });
        ref = category["subs"];
        results1 = [];
        for (j = 0, len = ref.length; j < len; j++) {
          sub = ref[j];
          results1.push(sortCategories(sub));
        }
        return results1;
      };
      paginateCategories = (category, page, parentPath) => {
        var j, len, p, ref, results, sub;
        results = [];
        p = Object.assign({}, page);
        p["layout"] = "category";
        p["docPath"] = path.join(parentPath, `${category["name"]}`, "index.html");
        p["title"] = `${category["name"]}`;
        results = results.concat(paginate(p, category["posts"], this.siteConfig["perPage"]));
        ref = category["subs"];
        for (j = 0, len = ref.length; j < len; j++) {
          sub = ref[j];
          results = results.concat(paginateCategories(sub, page, path.join(parentPath, `${category["name"]}`)));
        }
        return results;
      };
      this.generator.register("categories", function(page, posts) {
        var cateName, categories, category, found, j, k, l, len, len1, len2, len3, len4, m, n, newCate, post, ref, results, sub, subCategories;
        categories = [];
        for (j = 0, len = posts.length; j < len; j++) {
          post = posts[j];
          if (post["categories"] == null) {
            continue;
          }
          subCategories = categories;
          ref = post["categories"];
          for (k = 0, len1 = ref.length; k < len1; k++) {
            cateName = ref[k];
            found = false;
            for (l = 0, len2 = subCategories.length; l < len2; l++) {
              category = subCategories[l];
              if (category["name"] === cateName) {
                found = true;
                category["posts"].push(post);
                subCategories = category["subs"];
                break;
              }
            }
            if (!found) {
              newCate = {
                "name": cateName,
                "posts": [post],
                "subs": []
              };
              subCategories.push(newCate);
              subCategories = newCate["subs"];
            }
          }
        }
        categories.sort(function(a, b) {
          return a["name"].localeCompare(b["name"]);
        });
        for (m = 0, len3 = categories.length; m < len3; m++) {
          sub = categories[m];
          sortCategories(sub);
        }
        results = [];
        for (n = 0, len4 = categories.length; n < len4; n++) {
          sub = categories[n];
          results = results.concat(paginateCategories(sub, page, path.dirname(page["docPath"])));
        }
        results.push(Object.assign({
          "posts": categories
        }, page));
        return results;
      });
      /*
      [
        {
          "name": String,
          "posts": [Post]
        }
      ]
      */
      return this.generator.register("tags", (page, posts) => {
        var found, j, k, l, len, len1, len2, len3, len4, m, n, p, post, ref, results, tag, tagName, tags;
        tags = [];
        for (j = 0, len = posts.length; j < len; j++) {
          post = posts[j];
          if (post["tags"] == null) {
            continue;
          }
          ref = post["tags"];
          for (k = 0, len1 = ref.length; k < len1; k++) {
            tagName = ref[k];
            found = false;
            for (l = 0, len2 = tags.length; l < len2; l++) {
              tag = tags[l];
              if (tag["name"] === tagName) {
                found = true;
                tag["posts"].push(post);
                break;
              }
            }
            if (!found) {
              tags.push({
                "name": tagName,
                "posts": [post]
              });
            }
          }
        }
        tags.sort(function(a, b) {
          return a["name"].localeCompare(b["name"]);
        });
        for (m = 0, len3 = tags.length; m < len3; m++) {
          tag = tags[m];
          tag["posts"].sort(function(a, b) {
            return -(a["date"] - b["date"]);
          });
        }
        results = [];
        for (n = 0, len4 = tags.length; n < len4; n++) {
          tag = tags[n];
          p = Object.assign({}, page);
          p["layout"] = "tag";
          p["docPath"] = path.join(path.dirname(page["docPath"]), `${tag["name"]}`, "index.html");
          p["title"] = `${tag["name"]}`;
          results = results.concat(paginate(p, tag["posts"], this.siteConfig["perPage"]));
        }
        results.push(Object.assign({
          "posts": tags
        }, page));
        return results;
      });
    }

  };

  paginate = function(page, posts, perPage) {
    var i, j, k, len, perPagePosts, post, ref, results;
    if (!perPage) {
      perPage = 10;
    }
    results = [];
    perPagePosts = [];
    for (j = 0, len = posts.length; j < len; j++) {
      post = posts[j];
      if (perPagePosts.length === perPage) {
        results.push(Object.assign({
          "posts": perPagePosts
        }, page));
        perPagePosts = [];
      }
      perPagePosts.push(post);
    }
    results.push(Object.assign({
      "posts": perPagePosts
    }, page));
    results[0]["pageArray"] = results;
    results[0]["pageIndex"] = 1;
    results[0]["docPath"] = page["docPath"];
    for (i = k = 1, ref = results.length; (1 <= ref ? k < ref : k > ref); i = 1 <= ref ? ++k : --k) {
      results[i]["pageArray"] = results;
      results[i]["pageIndex"] = i + 1;
      results[i]["docPath"] = path.join(path.dirname(page["docPath"]), `${results[i]["pageIndex"]}.html`);
    }
    return results;
  };

}).call(this);
