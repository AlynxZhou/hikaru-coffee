// Generated by CoffeeScript 2.3.1
(function() {
  var Generator, Hikaru, Logger, Processer, Promise, Renderer, Router, Translator, URL, cheerio, coffee, colors, escapeHTML, fse, getAbsPathFn, getUrlFn, glob, highlight, marked, moment, nib, nunjucks, paginate, paginateCategories, path, removeControlChars, sortCategories, stylus, yaml;

  fse = require("fs-extra");

  path = require("path");

  ({URL} = require("url"));

  glob = require("glob");

  cheerio = require("cheerio");

  moment = require("moment");

  colors = require("colors/safe");

  Promise = require("bluebird");

  yaml = require("js-yaml");

  nunjucks = require("nunjucks");

  marked = require("marked");

  stylus = require("stylus");

  nib = require("nib");

  coffee = require("coffeescript");

  highlight = require("./highlight");

  Logger = require("./logger");

  Renderer = require("./renderer");

  Processer = require("./processer");

  Generator = require("./generator");

  Translator = require("./translator");

  Router = require("./router");

  ({escapeHTML, removeControlChars, paginate, sortCategories, paginateCategories, getAbsPathFn, getUrlFn} = require("./utils"));

  module.exports = Hikaru = class Hikaru {
    constructor(debug = false) {
      this.init = this.init.bind(this);
      this.clean = this.clean.bind(this);
      this.generate = this.generate.bind(this);
      this.registerInternalRenderers = this.registerInternalRenderers.bind(this);
      this.registerInternalProcessers = this.registerInternalProcessers.bind(this);
      this.registerInternalGenerators = this.registerInternalGenerators.bind(this);
      this.debug = debug;
      this.logger = new Logger(this.debug);
      this.logger.debug("Hikaru is starting...");
      process.on("exit", () => {
        return this.logger.debug("Hikaru is stopping...");
      });
    }

    init(workDir = ".", configPath) {
      return fse.mkdirp(workDir).then(() => {
        this.logger.debug(`Hikaru is copying \`${colors.cyan(configPath || path.join(workDir, "config.yml"))}\`.`);
        this.logger.debug(`Hikaru is creating \`${colors.cyan(path.join(workDir, "src", path.sep))}\`.`);
        this.logger.debug(`Hikaru is creating \`${colors.cyan(path.join(workDir, "doc", path.sep))}\`.`);
        this.logger.debug(`Hikaru is creating \`${colors.cyan(path.join(workDir, "themes", path.sep))}\`.`);
        fse.copy(path.join(__dirname, "..", "dist", "config.yml"), configPath || path.join(workDir, "config.yml"));
        fse.mkdirp(path.join(workDir, "src")).then(() => {
          this.logger.debug(`Hikaru is copying \`${colors.cyan(path.join(workDir, "src", "archives", "index.md"))}\`.`);
          this.logger.debug(`Hikaru is copying \`${colors.cyan(path.join(workDir, "src", "categories", "index.md"))}\`.`);
          this.logger.debug(`Hikaru is copying \`${colors.cyan(path.join(workDir, "src", "tags", "index.md"))}\`.`);
          fse.copy(path.join(__dirname, "..", "dist", "archives.md"), path.join(workDir, "src", "archives", "index.md"));
          fse.copy(path.join(__dirname, "..", "dist", "categories.md"), path.join(workDir, "src", "categories", "index.md"));
          return fse.copy(path.join(__dirname, "..", "dist", "tags.md"), path.join(workDir, "src", "tags", "index.md"));
        });
        fse.mkdirp(path.join(workDir, "doc"));
        return fse.mkdirp(path.join(workDir, "themes"));
      }).catch((err) => {
        this.logger.warn("Hikaru catched some error during initializing!");
        return this.logger.error(err);
      });
    }

    clean(workDir = ".", configPath) {
      var siteConfig;
      configPath = configPath || path.join(workDir, "config.yml");
      siteConfig = yaml.safeLoad(fse.readFileSync(configPath, "utf8"));
      if ((siteConfig != null ? siteConfig["docDir"] : void 0) == null) {
        return;
      }
      return glob("*", {
        "cwd": path.join(workDir, siteConfig["docDir"])
      }, (err, res) => {
        if (err) {
          return err;
        }
        return res.map((r) => {
          return fse.stat(path.join(workDir, siteConfig["docDir"], r)).then((stats) => {
            if (stats.isDirectory()) {
              this.logger.debug(`Hikaru is removing \`${colors.cyan(path.join(workDir, siteConfig["docDir"], r, path.sep))}\`.`);
            } else {
              this.logger.debug(`Hikaru is removing \`${colors.cyan(path.join(workDir, siteConfig["docDir"], r))}\`.`);
            }
            return fse.remove(path.join(workDir, siteConfig["docDir"], r));
          }).catch((err) => {
            this.logger.warn("Hikaru catched some error during cleaning!");
            return this.logger.error(err);
          });
        });
      });
    }

    generate(workDir = ".", configPath) {
      var defaultLanguage, err;
      this.site = {
        "workDir": workDir,
        "siteConfig": {},
        "themeConfig": {},
        "templates": {},
        "assets": [],
        "pages": [],
        "posts": [],
        "file": [],
        "categories": [],
        // Flattend categories length.
        "categoriesLength": 0,
        "tags": [],
        // Flattend tags length.
        "tagsLength": 0
      };
      configPath = configPath || path.join(this.site["workDir"], "config.yml");
      try {
        this.site["siteConfig"] = yaml.safeLoad(fse.readFileSync(configPath, "utf8"));
      } catch (error) {
        err = error;
        this.logger.warn("Hikaru cannot find site config!");
        this.logger.error(err);
        process.exit(-1);
      }
      this.site["srcDir"] = path.join(this.site["workDir"], this.site["siteConfig"]["srcDir"] || "srcs");
      this.site["docDir"] = path.join(this.site["workDir"], this.site["siteConfig"]["docDir"] || "docs");
      this.site["themeDir"] = path.join(this.site["workDir"], "themes", this.site["siteConfig"]["themeDir"]);
      this.site["themeSrcDir"] = path.join(this.site["themeDir"], "srcs");
      try {
        this.site["themeConfig"] = yaml.safeLoad(fse.readFileSync(path.join(this.site["themeDir"], "config.yml")));
      } catch (error) {
        err = error;
        if (err["code"] === "ENOENT") {
          this.logger.warn("Hikaru continues with a empty theme config...");
        }
      }
      this.site["categoryDir"] = this.site["siteConfig"]["categoryDir"] || "categories";
      this.site["tagDir"] = this.site["siteConfig"]["tagDir"] || "tags";
      this.renderer = new Renderer(this.logger, this.site["siteConfig"]["skipRender"]);
      this.processer = new Processer(this.logger);
      this.generator = new Generator(this.logger);
      this.translator = new Translator(this.logger);
      try {
        defaultLanguage = yaml.safeLoad(fse.readFileSync(path.join(this.site["themeDir"], "languages", "default.yml")));
        this.translator.register("default", defaultLanguage);
      } catch (error) {
        err = error;
        if (err["code"] === "ENOENT") {
          this.logger.warn("Hikaru cannot find default language file in your theme.");
        }
      }
      this.router = new Router(this.logger, this.renderer, this.processer, this.generator, this.translator, this.site);
      try {
        this.registerInternalRenderers();
        this.registerInternalProcessers();
        this.registerInternalGenerators();
      } catch (error) {
        err = error;
        this.logger.warn("Hikaru cannot register internal functions!");
        this.logger.error(err);
        process.exit(-2);
      }
      return this.router.route();
    }

    registerInternalRenderers() {
      var coffeeConfig, markedConfig, njkConfig, njkEnv, stylConfig;
      njkConfig = Object.assign({
        "autoescape": false
      }, this.site["siteConfig"]["nunjucks"]);
      njkEnv = nunjucks.configure(this.site["themeSrcDir"], njkConfig);
      this.renderer.register([".njk", ".j2"], null, function(file, ctx) {
        return new Promise(function(resolve, reject) {
          var err, template;
          try {
            template = nunjucks.compile(file["text"], njkEnv, file["srcPath"]);
            // For template you must give a render function.
            file["content"] = function(ctx) {
              return new Promise(function(resolve, reject) {
                return template.render(ctx, function(err, res) {
                  if (err) {
                    return reject(err);
                  }
                  return resolve(res);
                });
              });
            };
            return resolve(file);
          } catch (error) {
            err = error;
            return reject(err);
          }
        });
      });
      markedConfig = Object.assign({
        "gfm": true,
        "langPrefix": "",
        "highlight": (code, lang) => {
          return highlight(code, Object.assign({
            "lang": lang != null ? lang.toLowerCase() : void 0,
            "hljs": true,
            "gutter": true
          }, this.site["siteConfig"]["highlight"]));
        }
      }, this.site["siteConfig"]["marked"]);
      marked.setOptions(markedConfig);
      this.renderer.register(".md", ".html", function(file, ctx) {
        return new Promise(function(resolve, reject) {
          var err;
          try {
            file["content"] = marked(file["text"]);
            return resolve(file);
          } catch (error) {
            err = error;
            return reject(err);
          }
        });
      });
      stylConfig = this.site["siteConfig"]["stylus"] || {};
      this.renderer.register(".styl", ".css", (file, ctx) => {
        return new Promise((resolve, reject) => {
          return stylus(file["text"]).use(nib()).use((style) => {
            return style.define("getSiteConfig", (file) => {
              var j, k, keys, len, res;
              keys = file["val"].toString().split(".");
              res = this.site["siteConfig"];
              for (j = 0, len = keys.length; j < len; j++) {
                k = keys[j];
                if (!(k in res)) {
                  return null;
                }
                res = res[k];
              }
              return res;
            });
          }).use((style) => {
            return style.define("getThemeConfig", (file) => {
              var j, k, keys, len, res;
              keys = file["val"].toString().split(".");
              res = this.site["themeConfig"];
              for (j = 0, len = keys.length; j < len; j++) {
                k = keys[j];
                if (!(k in res)) {
                  return null;
                }
                res = res[k];
              }
              return res;
            });
          }).set("filename", path.join(this.site["themeSrcDir"], file["srcPath"])).set("sourcemap", stylConfig["sourcemap"]).set("compress", stylConfig["compress"]).set("include css", true).render(function(err, res) {
            if (err) {
              return reject(err);
            }
            file["content"] = res;
            return resolve(file);
          });
        });
      });
      coffeeConfig = this.site["siteConfig"]["coffeescript"] || {};
      return this.renderer.register(".coffee", ".js", function(file, ctx) {
        return new Promise(function(resolve, reject) {
          var err;
          try {
            file["content"] = coffee.compile(file["text"], coffeeConfig);
            return resolve(file);
          } catch (error) {
            err = error;
            return reject(err);
          }
        });
      });
    }

    registerInternalProcessers() {
      this.processer.register("index", (p, posts, ctx) => {
        return new Promise((resolve, reject) => {
          var err;
          try {
            posts.sort(function(a, b) {
              return -(a["date"] - b["date"]);
            });
            return resolve(paginate(p, posts, this.site["siteConfig"]["perPage"], ctx));
          } catch (error) {
            err = error;
            return reject(err);
          }
        });
      });
      this.processer.register("archives", (p, posts, ctx) => {
        return new Promise((resolve, reject) => {
          var err;
          try {
            posts.sort(function(a, b) {
              return -(a["date"] - b["date"]);
            });
            return resolve(paginate(p, posts, this.site["siteConfig"]["perPage"], ctx));
          } catch (error) {
            err = error;
            return reject(err);
          }
        });
      });
      this.processer.register("categories", function(p, posts, ctx) {
        return new Promise(function(resolve, reject) {
          var err;
          try {
            return resolve(Object.assign({}, p, ctx, {
              "categories": ctx["site"]["categories"]
            }));
          } catch (error) {
            err = error;
            return reject(err);
          }
        });
      });
      this.processer.register("tags", function(p, posts, ctx) {
        return new Promise(function(resolve, reject) {
          var err;
          try {
            return resolve(Object.assign({}, p, ctx, {
              "tags": ctx["site"]["tags"]
            }));
          } catch (error) {
            err = error;
            return reject(err);
          }
        });
      });
      return this.processer.register(["post", "page"], (p, posts, ctx) => {
        return new Promise((resolve, reject) => {
          var $, a, err, escaped, getAbsPath, getUrl, h, hNames, headerIds, headings, href, i, id, imgs, j, l, len, len1, len2, level, links, m, split, src, text, toc;
          try {
            getUrl = getUrlFn(this.site["siteConfig"]["baseUrl"], this.site["siteConfig"]["rootDir"]);
            getAbsPath = getAbsPathFn(this.site["siteConfig"]["rootDir"]);
            $ = cheerio.load(p["content"]);
            // TOC generate.
            hNames = ["h1", "h2", "h3", "h4", "h5", "h6"];
            headings = $(hNames.join(", "));
            toc = [];
            headerIds = {};
            for (j = 0, len = headings.length; j < len; j++) {
              h = headings[j];
              level = toc;
              while (level.length > 0 && hNames.indexOf(level[level.length - 1]["name"]) < hNames.indexOf(h["name"])) {
                level = level[level.length - 1]["subs"];
              }
              text = $(h).text();
              escaped = escapeHTML(text).trim();
              if (headerIds[escaped]) {
                id = `${escaped}-${headerIds[escaped]++}`;
              } else {
                id = escaped;
                headerIds[escaped] = 1;
              }
              $(h).html(`<${h["name"]} id="${id}">` + `<a class="headerlink" href="#${id}" title="${escaped}">` + "</a>" + `${text}` + `</${h["name"]}>`);
              level.push({
                "docPath": path.join(path.dirname(p["docPath"]), `#${id}`),
                "name": h["name"],
                "text": text.trim(),
                "subs": []
              });
            }
            // Replace relative path to absolute path.
            links = $("a");
            for (l = 0, len1 = links.length; l < len1; l++) {
              a = links[l];
              href = $(a).attr("href");
              if (new URL(href, this.site["siteConfig"]["baseUrl"]).host !== getUrl(p["docPath"]).host) {
                $(a).attr("target", "_blank");
              }
              if (href.startsWith("https://") || href.startsWith("http://") || href.startsWith("//") || href.startsWith("/") || href.startsWith("javascript:")) {
                continue;
              }
              $(a).attr("href", getAbsPath(path.join(path.dirname(p["docPath"]), href)));
            }
            imgs = $("img");
            for (m = 0, len2 = imgs.length; m < len2; m++) {
              i = imgs[m];
              src = $(i).attr("src");
              if (src.startsWith("https://") || src.startsWith("http://") || src.startsWith("//") || src.startsWith("/") || src.startsWith("file:image")) {
                continue;
              }
              $(i).attr("src", getAbsPath(path.join(path.dirname(p["docPath"]), src)));
            }
            p["content"] = $("body").html();
            if (p["content"].indexOf("<!--more-->") !== -1) {
              split = p["content"].split("<!--more-->");
              p["excerpt"] = split[0];
              p["more"] = split[1];
            }
            return resolve(Object.assign({}, p, ctx, {
              "toc": toc,
              "$": $
            }));
          } catch (error) {
            err = error;
            return reject(err);
          }
        });
      });
    }

    registerInternalGenerators() {
      this.generator.register("beforeProcessing", function(site) {
        // Generate categories
        return new Promise(function(resolve, reject) {
          var cateName, categories, categoriesLength, category, err, found, j, l, len, len1, len2, len3, m, n, newCate, post, postCategories, ref, ref1, sub, subCategories;
          try {
            categories = [];
            categoriesLength = 0;
            ref = site["posts"];
            for (j = 0, len = ref.length; j < len; j++) {
              post = ref[j];
              if (post["categories"] == null) {
                continue;
              }
              postCategories = [];
              subCategories = categories;
              ref1 = post["categories"];
              for (l = 0, len1 = ref1.length; l < len1; l++) {
                cateName = ref1[l];
                found = false;
                for (m = 0, len2 = subCategories.length; m < len2; m++) {
                  category = subCategories[m];
                  if (category["name"] === cateName) {
                    found = true;
                    postCategories.push(category);
                    category["posts"].push(post);
                    subCategories = category["subs"];
                    break;
                  }
                }
                if (!found) {
                  newCate = {
                    "name": cateName,
                    "posts": [post],
                    "subs": []
                  };
                  ++categoriesLength;
                  postCategories.push(newCate);
                  subCategories.push(newCate);
                  subCategories = newCate["subs"];
                }
              }
              post["categories"] = postCategories;
            }
            categories.sort(function(a, b) {
              return a["name"].localeCompare(b["name"]);
            });
            for (n = 0, len3 = categories.length; n < len3; n++) {
              sub = categories[n];
              sortCategories(sub);
              site["pages"] = site["pages"].concat(paginateCategories(sub, site["categoryDir"], site["siteConfig"]["perPage"]));
            }
            site["categories"] = categories;
            site["categoriesLength"] = categoriesLength;
            return resolve(site);
          } catch (error) {
            err = error;
            return reject(err);
          }
        });
      });
      this.generator.register("beforeProcessing", function(site) {
        // Generate tags.
        return new Promise(function(resolve, reject) {
          var err, found, j, l, len, len1, len2, len3, m, n, newTag, post, postTags, ref, ref1, sp, tag, tagName, tags, tagsLength;
          try {
            tags = [];
            tagsLength = 0;
            ref = site["posts"];
            for (j = 0, len = ref.length; j < len; j++) {
              post = ref[j];
              if (post["tags"] == null) {
                continue;
              }
              postTags = [];
              ref1 = post["tags"];
              for (l = 0, len1 = ref1.length; l < len1; l++) {
                tagName = ref1[l];
                found = false;
                for (m = 0, len2 = tags.length; m < len2; m++) {
                  tag = tags[m];
                  if (tag["name"] === tagName) {
                    found = true;
                    postTags.push(tag);
                    tag["posts"].push(post);
                    break;
                  }
                }
                if (!found) {
                  newTag = {
                    "name": tagName,
                    "posts": [post]
                  };
                  ++tagsLength;
                  postTags.push(newTag);
                  tags.push(newTag);
                }
              }
              post["tags"] = postTags;
            }
            tags.sort(function(a, b) {
              return a["name"].localeCompare(b["name"]);
            });
            for (n = 0, len3 = tags.length; n < len3; n++) {
              tag = tags[n];
              tag["posts"].sort(function(a, b) {
                return -(a["date"] - b["date"]);
              });
              sp = {
                "layout": "tag",
                "docPath": path.join(site["tagDir"], `${tag["name"]}`, "index.html"),
                "title": "tag",
                "name": tag["name"].toString()
              };
              tag["docPath"] = sp["docPath"];
              site["pages"] = site["pages"].concat(paginate(sp, tag["posts"], site["siteConfig"]["perPage"]));
            }
            site["tags"] = tags;
            site["tagsLength"] = tagsLength;
            return resolve(site);
          } catch (error) {
            err = error;
            return reject(err);
          }
        });
      });
      this.generator.register("afterProcessing", function(site) {
        return new Promise(function(resolve, reject) {
          var all, err, getAbsPath, j, len, p, search;
          try {
            if (!site["siteConfig"]["search"]["enable"]) {
              return resolve(site);
            }
            // Generate search index.
            search = [];
            all = site["pages"].concat(site["posts"]);
            getAbsPath = getAbsPathFn(site["siteConfig"]["rootDir"]);
            for (j = 0, len = all.length; j < len; j++) {
              p = all[j];
              search.push({
                "title": `${p["title"]}`,
                "url": getAbsPath(p["docPath"]),
                "content": p["text"]
              });
            }
            site["file"].push({
              "docPath": site["siteConfig"]["search"]["path"] || "search.json",
              "content": JSON.stringify(search)
            });
            return resolve(site);
          } catch (error) {
            err = error;
            return reject(err);
          }
        });
      });
      this.generator.register("afterProcessing", function(site) {
        return new Promise(function(resolve, reject) {
          var content, err, tmpContent;
          try {
            if (!site["siteConfig"]["sitemap"]["enable"]) {
              return resolve(site);
            }
            // Generate sitemap.
            tmpContent = fse.readFileSync(path.join(__dirname, "..", "dist", "sitemap.njk"), "utf8");
            content = nunjucks.renderString(tmpContent, {
              "posts": site["posts"],
              "moment": moment,
              "getUrl": getUrlFn(site["siteConfig"]["baseUrl"], site["siteConfig"]["rootDir"]),
              "getAbsPath": getAbsPathFn(site["siteConfig"]["rootDir"])
            });
            site["file"].push({
              "docPath": site["siteConfig"]["sitemap"]["path"] || "sitemap.xml",
              "content": content
            });
            return resolve(site);
          } catch (error) {
            err = error;
            return reject(err);
          }
        });
      });
      return this.generator.register("afterProcessing", function(site) {
        return new Promise(function(resolve, reject) {
          var content, err, tmpContent;
          try {
            if (!site["siteConfig"]["feed"]["enable"]) {
              return resolve(site);
            }
            // Generate RSS feed.
            tmpContent = fse.readFileSync(path.join(__dirname, "..", "dist", "atom.njk"), "utf8");
            content = nunjucks.renderString(tmpContent, {
              "siteConfig": site["siteConfig"],
              "themeConfig": site["themeConfig"],
              "posts": site["posts"],
              "moment": moment,
              "removeControlChars": removeControlChars,
              "getUrl": getUrlFn(site["siteConfig"]["baseUrl"], site["siteConfig"]["rootDir"]),
              "getAbsPath": getAbsPathFn(site["siteConfig"]["rootDir"])
            });
            site["file"].push({
              "docPath": site["siteConfig"]["feed"]["path"] || "atom.xml",
              "content": content
            });
            return resolve(site);
          } catch (error) {
            err = error;
            return reject(err);
          }
        });
      });
    }

  };

}).call(this);
