// Generated by CoffeeScript 2.3.2
(function() {
  var Category, File, Site, Tag, Toc;

  Site = class Site {
    constructor(workDir) {
      this.wrap = this.wrap.bind(this);
      this.get = this.get.bind(this);
      this.set = this.set.bind(this);
      // Put a file into an array.
      // If a file with the same docPath already in array, replace it.
      // Else append it.
      this.put = this.put.bind(this);
      this.del = this.del.bind(this);
      this.raw = this.raw.bind(this);
      this._ = {
        "workDir": workDir,
        // You should not use these variables.
        "srcDir": "",
        "docDir": "",
        "themeDir": "",
        "themeSrcDir": "",
        "categoryDir": "",
        "tagDir": "",
        // end
        "siteConfig": {},
        "themeConfig": {},
        "templates": {},
        "assets": [],
        "pages": [],
        "posts": [],
        "files": [],
        "categories": [],
        // Flattened categories length.
        "categoriesLength": 0,
        "tags": [],
        // Flattened tags length.
        "tagsLength": 0
      };
      this.wrap();
    }

    wrap() {
      var key, results;
      results = [];
      for (key in this._) {
        results.push(((key) => {
          return Object.defineProperty(this, key, {
            "get": () => {
              return this.get(key);
            },
            "set": (value) => {
              return this.set(key, value);
            }
          });
        })(key));
      }
      return results;
    }

    get(key) {
      if (typeof key !== "string" || !(key in this._)) {
        throw new TypeError(`key must be a string in ${Object.keys(this._)}!`);
      }
      return this._[key];
    }

    set(key, value) {
      if (typeof key !== "string") {
        throw new TypeError("key must be a string!");
      }
      return this._[key] = value;
    }

    put(key, file) {
      var i;
      if ((key == null) || (file == null)) {
        return;
      }
      i = this._[key].findIndex(function(element) {
        return element["docPath"] === file["docPath"] && element["docDir"] === file["docDir"];
      });
      if (i !== -1) {
        return this._[key][i] = file;
      } else {
        return this._[key].push(file);
      }
    }

    del(key, file) {
      var i;
      if ((key == null) || (file == null)) {
        return null;
      }
      i = this._[key].findIndex(function(element) {
        return element["docPath"] === file["docPath"] && element["docDir"] === file["docDir"];
      });
      if (i !== -1) {
        return this._[key].splice(i, 1);
      } else {
        return null;
      }
    }

    raw() {
      return this._;
    }

  };

  File = class File {
    constructor(docDir, srcDir, srcPath) {
      this.docDir = docDir;
      this.docPath = null;
      this.srcDir = srcDir;
      this.srcPath = srcPath;
      this.createdTime = null;
      this.updatedTime = null;
      this.zone = null;
      this.title = null;
      this.layout = null;
      this.comment = null;
      this.reward = null;
      this.raw = null;
      this.text = null;
      this.content = null;
      this.type = null;
      this.frontMatter = {};
      this.categories = [];
      this.tags = [];
      this.excerpt = null;
      this.more = null;
      this.$ = null;
      this.toc = [];
      this.posts = [];
      this.pageArray = [];
      this.pageIndex = null;
      this.next = null;
      this.prev = null;
    }

  };

  Category = class Category {
    constructor(name, posts = [], subs = []) {
      this.name = name;
      this.posts = posts;
      this.subs = subs;
    }

  };

  Tag = class Tag {
    constructor(name, posts = []) {
      this.name = name;
      this.posts = posts;
    }

  };

  Toc = class Toc {
    constructor(name, archor, text, subs = []) {
      this.name = name;
      this.archor = archor;
      this.text = text;
      this.subs = subs;
    }

  };

  module.exports = {
    "Site": Site,
    "File": File,
    "Category": Category,
    "Tag": Tag,
    "Toc": Toc
  };

}).call(this);
